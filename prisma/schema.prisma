generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// User Management & Authentication
model User {
  id             String   @id @default(cuid())
  email          String   @unique
  password       String
  name           String
  phone          String?
  // Cloudinary Integration for Avatar
  avatar         String? // Cloudinary URL for avatar
  avatarPublicId String? // Cloudinary public_id for avatar
  isActive       Boolean  @default(true)
  role           Role     @default(WARGA)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  profile        UserProfile?
  sessions       Session[]
  activityLogs   ActivityLog[]
  createdWargas  Warga[]         @relation("CreatedBy")
  families       Family[]
  documents      Document[]
  transactions   Transaction[]
  payments       Payment[]
  announcements  Announcement[]
  emailCampaigns EmailCampaign[]

  @@map("users")
}

model UserProfile {
  id            String    @id @default(cuid())
  userId        String    @unique
  nik           String?   @unique
  birthDate     DateTime?
  birthPlace    String?
  address       String?
  job           String?
  education     String?
  maritalStatus String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @db.Text
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model ActivityLog {
  id          String   @id @default(cuid())
  userId      String
  action      String
  description String?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("activity_logs")
}

// RT Settings
model RtProfile {
  id           String   @id @default(cuid())
  rtNumber     String   @unique
  rwNumber     String
  kelurahan    String
  kecamatan    String
  kabupaten    String
  provinsi     String
  postalCode   String?
  description  String?
  // Cloudinary Integration for RT Logo
  logo         String? // Cloudinary URL for RT logo
  logoPublicId String? // Cloudinary public_id for logo
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("rt_profiles")
}

model RtSettings {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("rt_settings")
}

// Warga (Citizens) Management
model Warga {
  id            String        @id @default(cuid())
  nik           String        @unique
  noKk          String // Nomor Kartu Keluarga
  name          String
  email         String?       @unique
  phone         String?
  birthDate     DateTime?
  birthPlace    String?
  gender        Gender
  maritalStatus MaritalStatus @default(SINGLE)
  job           String?
  education     String?
  religion      String?
  address       String
  rtNumber      String
  rwNumber      String
  kelurahan     String
  kecamatan     String
  kabupaten     String
  provinsi      String
  postalCode    String?
  fatherName    String?
  motherName    String?
  isActive      Boolean       @default(true)
  createdById   String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  createdBy     User           @relation("CreatedBy", fields: [createdById], references: [id], onDelete: Restrict)
  familyMembers FamilyMember[]
  documents     Document[]
  transactions  Transaction[]
  payments      Payment[]

  @@map("wargas")
}

// Family Management
model Family {
  id          String   @id @default(cuid())
  noKk        String   @unique
  name        String
  headName    String
  address     String
  rtNumber    String
  rwNumber    String
  kelurahan   String
  kecamatan   String
  kabupaten   String
  provinsi    String
  postalCode  String?
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  createdBy User           @relation(fields: [createdById], references: [id], onDelete: Restrict)
  members   FamilyMember[]

  @@map("families")
}

model FamilyMember {
  id           String         @id @default(cuid())
  familyId     String
  wargaId      String
  relationship FamilyRelation @default(MEMBER)
  isHeadFamily Boolean        @default(false)
  createdAt    DateTime       @default(now())

  family Family @relation(fields: [familyId], references: [id], onDelete: Cascade)
  warga  Warga  @relation(fields: [wargaId], references: [id], onDelete: Cascade)

  @@unique([familyId, wargaId])
  @@map("family_members")
}

// Document Management
model Document {
  id          String         @id @default(cuid())
  title       String
  type        DocumentType
  content     String?
  filePath    String?
  fileSize    Int?
  mimeType    String?
  status      DocumentStatus @default(DRAFT)
  requesterId String?
  approverId  String?
  wargaId     String?
  templateId  String?
  number      String?        @unique
  isArchived  Boolean        @default(false)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  requester User?              @relation(fields: [requesterId], references: [id], onDelete: SetNull)
  warga     Warga?             @relation(fields: [wargaId], references: [id], onDelete: SetNull)
  template  DocumentTemplate?  @relation(fields: [templateId], references: [id], onDelete: SetNull)
  workflow  DocumentWorkflow[]

  @@map("documents")
}

model DocumentTemplate {
  id        String       @id @default(cuid())
  name      String
  type      DocumentType
  content   String
  variables String? // JSON format
  isActive  Boolean      @default(true)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  documents Document[]

  @@map("document_templates")
}

model DocumentWorkflow {
  id         String         @id @default(cuid())
  documentId String
  step       Int
  status     WorkflowStatus
  approver   String?
  notes      String?
  createdAt  DateTime       @default(now())

  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@map("document_workflows")
}

// Financial Management
model Transaction {
  id            String          @id @default(cuid())
  type          TransactionType
  category      String
  amount        Decimal         @db.Decimal(15, 2)
  description   String
  date          DateTime
  wargaId       String?
  createdById   String
  // Cloudinary Integration
  proofUrl      String? // Cloudinary URL untuk bukti transaksi
  proofPublicId String? // Cloudinary public_id untuk delete/update
  proofFileName String? // Nama file asli bukti
  proofFileSize Int? // Ukuran file bukti
  proofMimeType String? // Tipe MIME file bukti
  proofWidth    Int? // Lebar gambar (dari Cloudinary)
  proofHeight   Int? // Tinggi gambar (dari Cloudinary)
  notes         String? // Catatan tambahan
  verifiedBy    String? // User yang memverifikasi
  verifiedAt    DateTime? // Waktu verifikasi
  isVerified    Boolean         @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  warga       Warga?       @relation(fields: [wargaId], references: [id], onDelete: SetNull)
  createdBy   User         @relation(fields: [createdById], references: [id], onDelete: Restrict)
  budgetItems BudgetItem[]

  @@map("transactions")
}

model Budget {
  id          String   @id @default(cuid())
  year        Int
  name        String
  totalAmount Decimal  @db.Decimal(15, 2)
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  items BudgetItem[]

  @@unique([year, name])
  @@map("budgets")
}

model BudgetItem {
  id            String   @id @default(cuid())
  budgetId      String
  transactionId String?
  category      String
  plannedAmount Decimal  @db.Decimal(15, 2)
  actualAmount  Decimal? @db.Decimal(15, 2)
  description   String?

  budget      Budget       @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  transaction Transaction? @relation(fields: [transactionId], references: [id], onDelete: SetNull)

  @@map("budget_items")
}

model Payment {
  id            String        @id @default(cuid())
  type          PaymentType
  amount        Decimal       @db.Decimal(15, 2)
  description   String
  dueDate       DateTime
  paidDate      DateTime?
  status        PaymentStatus @default(PENDING)
  wargaId       String
  createdById   String
  // Cloudinary Integration
  proofUrl      String? // Cloudinary URL untuk bukti pembayaran
  proofPublicId String? // Cloudinary public_id untuk delete/update
  proofFileName String? // Nama file asli bukti  
  proofFileSize Int? // Ukuran file bukti
  proofMimeType String? // Tipe MIME file bukti
  proofWidth    Int? // Lebar gambar (dari Cloudinary)
  proofHeight   Int? // Tinggi gambar (dari Cloudinary)
  notes         String? // Catatan tambahan
  verifiedBy    String? // User yang memverifikasi pembayaran
  verifiedAt    DateTime? // Waktu verifikasi
  isVerified    Boolean       @default(false)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  warga     Warga @relation(fields: [wargaId], references: [id], onDelete: Restrict)
  createdBy User  @relation(fields: [createdById], references: [id], onDelete: Restrict)

  @@map("payments")
}

// Announcement & Communication
model Announcement {
  id          String           @id @default(cuid())
  title       String
  content     String
  type        AnnouncementType @default(INFO)
  priority    Priority         @default(NORMAL)
  isPublished Boolean          @default(false)
  publishedAt DateTime?
  expiresAt   DateTime?
  createdById String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  createdBy  User                    @relation(fields: [createdById], references: [id], onDelete: Restrict)
  recipients AnnouncementRecipient[]

  @@map("announcements")
}

model AnnouncementRecipient {
  id             String        @id @default(cuid())
  announcementId String
  recipientType  RecipientType
  recipientId    String?
  isRead         Boolean       @default(false)
  readAt         DateTime?

  announcement Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)

  @@map("announcement_recipients")
}

// Email Management
model EmailCampaign {
  id          String         @id @default(cuid())
  name        String
  subject     String
  content     String
  templateId  String?
  status      CampaignStatus @default(DRAFT)
  scheduledAt DateTime?
  sentAt      DateTime?
  createdById String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  createdBy User           @relation(fields: [createdById], references: [id], onDelete: Restrict)
  template  EmailTemplate? @relation(fields: [templateId], references: [id], onDelete: SetNull)
  emails    Email[]

  @@map("email_campaigns")
}

model EmailTemplate {
  id        String   @id @default(cuid())
  name      String
  subject   String
  content   String
  variables String? // JSON format
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  campaigns EmailCampaign[]
  emails    Email[]

  @@map("email_templates")
}

model Email {
  id           String      @id @default(cuid())
  campaignId   String?
  templateId   String?
  to           String
  subject      String
  content      String
  status       EmailStatus @default(QUEUED)
  sentAt       DateTime?
  openedAt     DateTime?
  clickedAt    DateTime?
  bouncedAt    DateTime?
  errorMessage String?
  createdAt    DateTime    @default(now())

  campaign EmailCampaign? @relation(fields: [campaignId], references: [id], onDelete: SetNull)
  template EmailTemplate? @relation(fields: [templateId], references: [id], onDelete: SetNull)

  @@map("emails")
}

// File Management with Cloudinary
model FileUpload {
  id            String   @id @default(cuid())
  filename      String
  originalName  String
  // Cloudinary Integration
  cloudinaryUrl String // Cloudinary secure URL
  publicId      String // Cloudinary public_id untuk management
  resourceType  String // image, video, raw, auto
  format        String? // jpg, png, pdf, etc
  width         Int? // Untuk image/video
  height        Int? // Untuk image/video
  size          Int // File size dalam bytes
  mimeType      String
  uploadedBy    String
  folder        String? // Cloudinary folder organization
  tags          String? // Cloudinary tags (comma separated)
  createdAt     DateTime @default(now())

  @@map("file_uploads")
}

// System Settings & Utilities
model SystemSetting {
  id          String      @id @default(cuid())
  key         String      @unique
  value       String
  type        SettingType @default(STRING)
  description String?
  isSystem    Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("system_settings")
}

model Backup {
  id          String       @id @default(cuid())
  filename    String
  path        String
  size        Int
  type        BackupType
  status      BackupStatus @default(IN_PROGRESS)
  createdAt   DateTime     @default(now())
  completedAt DateTime?

  @@map("backups")
}

model ScheduledJob {
  id        String    @id @default(cuid())
  name      String
  type      JobType
  schedule  String // cron format
  lastRun   DateTime?
  nextRun   DateTime?
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("scheduled_jobs")
}

// Enums
enum Role {
  SUPER_ADMIN
  KETUA_RT
  SEKRETARIS
  BENDAHARA
  STAFF
  WARGA
}

enum Gender {
  MALE
  FEMALE
}

enum MaritalStatus {
  SINGLE
  MARRIED
  DIVORCED
  WIDOWED
}

enum FamilyRelation {
  HEAD
  SPOUSE
  CHILD
  PARENT
  SIBLING
  MEMBER
}

enum DocumentType {
  SURAT_PENGANTAR
  SURAT_KETERANGAN
  SURAT_DOMISILI
  SURAT_TIDAK_MAMPU
  SURAT_KELAHIRAN
  SURAT_KEMATIAN
  SURAT_PINDAH
  OTHER
}

enum DocumentStatus {
  DRAFT
  SUBMITTED
  IN_REVIEW
  APPROVED
  REJECTED
  COMPLETED
}

enum WorkflowStatus {
  PENDING
  APPROVED
  REJECTED
  SKIPPED
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum PaymentType {
  IURAN_BULANAN
  IURAN_KEBERSIHAN
  SUMBANGAN
  DENDA
  OTHER
}

enum PaymentStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

enum AnnouncementType {
  INFO
  WARNING
  URGENT
  EVENT
}

enum Priority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum RecipientType {
  ALL
  ROLE
  SPECIFIC
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  SENDING
  SENT
  CANCELLED
}

enum EmailStatus {
  QUEUED
  SENDING
  SENT
  FAILED
  BOUNCED
}

enum SettingType {
  STRING
  NUMBER
  BOOLEAN
  JSON
}

enum BackupType {
  FULL
  PARTIAL
  AUTOMATED
}

enum BackupStatus {
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum JobType {
  EMAIL_REMINDER
  BACKUP
  CLEANUP
  REPORT_GENERATION
}
